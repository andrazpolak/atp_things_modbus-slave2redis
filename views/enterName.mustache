<html>
    <head>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" crossorigin="anonymous">
    </head>
    <body>
        <div class="container">
            <h1>Module:
                {{ pageTitle }}</h1>
            <div class="container bg-primary">
                <h3 class="card-title">{{ module.identity.name }}</h3>
                <div class="container m-1 bg-light border">
                    <h4>Identity</h4>
                    <p>
                        <b>UUID:</b>
                        {{ module.identity.uuid }}<br>
                        <b>Vendor:</b>
                        {{ module.identity.vendor }}<br>
                        <b>Model:</b>
                        {{ module.identity.model }}<br>
                        <b>Serial:</b>
                        {{ module.identity.serial }}<br>
                        <b>Local ID:</b>
                        {{ module.identity.id_local }}</p>
                </div>
                <div class="container m-1 bg-light border">
                    <h4>Communication</h4>
                    <p>
                        <b>Hostname:</b>
                        <a href="http://{{ communication.hostname }}">{{ module.communication.hostname }}</a><br>
                        <b>Type:</b>
                        {{ module.communication.type }}<br>
                        <b>Port:</b>
                        {{ module.communication.port }}<br></p>
                </div>
            </div>
            {{#devices}}
                <div class="container bg-primary">
                    <h3 class="card-title">{{ identity.name }}</h3>
                    <div class="container m-1 bg-light border">
                        <h4>Identity</h4>
                        <p>
                            <b>UUID:</b>
                            {{ identity.uuid }}<br>
                            <b>Vendor:</b>
                            {{ identity.vendor }}<br>
                            <b>Model:</b>
                            {{ identity.model }}<br>
                            <b>Serial:</b>
                            {{ identity.serial }}<br>
                            <b>Local ID:</b>
                            {{ identity.id_local }}</p>
                    </div>
                    <div class="container m-1 bg-light border">
                        <h4>Communication</h4>
                        <p>
                            <b>Type:</b>
                            {{ communication.type }}<br>
                            <b>Port:</b>
                            {{ communication.port }}<br>
                            <b>Id:</b>
                            {{ communication.id }}<br></p>
                    </div>
                    <div class="container m-1 bg-light border">
                        <h4>Data points</h4>
                        <table id="TableDataPoints"></table>
                    </div>
                    <div class="container m-1 bg-light border">
                        <h4>Coils</h4>
                        <table id="TableCoils"></table>
                    </div>
                    <div class="container m-1 bg-light border">
                        <h4>Registers</h4>
                        <table id="TableRegisters"></table>
                    </div>
                </div>
            {{/devices}}
        </div>


        <script>
            async function getModbusCoils() {
                let CoilsText = `<tr>
                                <th>Address</th>
                                <th>Timestamp [ms]</th>
                                <th>Value</th>
                            </tr>`
                fetch('/coils').then(function (response) {
                    return response.json();
                }).then(data => {
                    const coils = data.data.coils;

                    for (let coil in coils) {
                        CoilsText += `<tr>
                                    <th>${coil}</th>
                                    <td>${
                            coils[coil].ts
                        }</td>
                                    <td>${
                            coils[coil].value
                        }</td>
                                </tr>`
                    }
                    document.getElementById("TableCoils").innerHTML = CoilsText;
                    {{ ! location.reload(); }}
                }).catch(err => {
                    console.log("Write output", "error:", err);
                })
            }
            async function getModbusRegisters() {
                let TableContent = `<tr>
                                <th>Address</th>
                                <th>Timestamp [ms]</th>
                                <th>Value</th>
                            </tr>`
                fetch('/registers').then(function (response) {
                    return response.json();
                }).then(data => {
                    const registers = data.data.registers;

                    for (let register in registers) {
                        TableContent += `<tr>
                                    <th>${register}</th>
                                    <td>${
                            registers[register].ts
                        }</td>
                                    <td>${
                            registers[register].value
                        }</td>
                                </tr>`
                    }
                    document.getElementById("TableRegisters").innerHTML = TableContent;
                    {{ ! location.reload(); }}
                }).catch(err => {
                    console.log("Write output", "error:", err);
                })
            }

            async function getModbusVariables() {
                let TableContent = `<tr>
                                <th>UUID</th>
                                <th>Name</th>
                                <th>Label</th>
                                <th>Type</th>
                                <th>Timestamp [ms]</th>
                                <th>Value type</th>
                                <th>Value</th>
                                <th>Unit</th>
                            </tr>`
                fetch('/datapoints').then(function (response) {
                    return response.json();
                }).then(data => {
                    const variables = data.data.variables;

                    variables.forEach(datapoint => {
                        TableContent += `<tr>
                                    <th>${
                            datapoint.uuid
                        }</th>
                                           <th>${
                            datapoint.name
                        }</th>
                                           <th>${
                            datapoint.label
                        }</th>
                                           <th>${
                            datapoint.type
                        }</th>
                                           <th>${
                            datapoint.ts
                        }</th>
                                           <th>${
                            datapoint.value_type
                        }</th>
                                          <th>${
                            datapoint.value
                        }</th>
                                                                  <th>${
                            datapoint.unit
                        }</th>
     
                                </tr>`

                    })
                    document.getElementById("TableDataPoints").innerHTML = TableContent;
                    {{ ! location.reload(); }}
                }).catch(err => {
                    console.log("Write output", "error:", err);
                })
            }

            setInterval(getModbusCoils, 1000);
            setInterval(getModbusRegisters, 1000);
            setInterval(getModbusVariables, 1000);
        </script>
    </body>
</html>
